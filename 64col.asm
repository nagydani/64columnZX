; Switch a ZX Spectrum 48K into 64 column mode
; Copyright (C) 2019 Daniel A. Nagy <nagydani@epointsystem.org>
;
;  This program is free software: you can redistribute it and/or modify
;  it under the terms of the GNU General Public License as published by
;  the Free Software Foundation, either version 3 of the License, or
;  (at your option) any later version.
;
;  This program is distributed in the hope that it will be useful,
;  but WITHOUT ANY WARRANTY; without even the implied warranty of
;  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;  GNU General Public License for more details.
;
;  You should have received a copy of the GNU General Public License
;  along with this program. If not, see <https://www.gnu.org/licenses/>.


; ROM entry points
BEEPER:		EQU	0x03B5
PRINT_OUT:	EQU	0x09F4
POTV1:		EQU	0x0A7D
POCHANGE:	EQU	0x0A80
POSTORE:	EQU	0x0ADC
POST_E:		EQU	0x0AF0
POFETCH:	EQU	0x0B03
POFETCH2:	EQU	0x0B15
PATTR:		EQU	0x0BDB
PMSG:		EQU	0x0C0A
POSAVE:		EQU	0x0C3B
POSCR_C:	EQU	0x0C5D
REPORT5:	EQU	0x0C86
TEMPS:		EQU	0x0D4D
CL_LINE:	EQU	0x0E44
CL_ADDR:	EQU	0x0E9B
COPY_BUFF:	EQU	0x0ECD
EDITOR_C:	EQU	0x0F58
ADD_CHAR:	EQU	0x0F81
ED_KEYS:	EQU	0x0F92
ED_STOP:	EQU	0x1001
ED_END:		EQU	0x1026
ED_LIST_C:	EQU	0x1071
CLEAR_SP:	EQU	0x1097
KEY_INPUT_C:	EQU	0x10C4
KEY_CHAN:	EQU	0x1113
ED_FULL:	EQU	0x1167
ED_C_END_C:	EQU	0x1187
SET_DE:		EQU	0x1195
REMOVE_FP:	EQU	0x11A7
REPORTS:	EQU	0x1391
COMMA_SPC:	EQU	0x1536
REPORT_J:	EQU	0x15C4
WAIT_KEY:	EQU	0x15D4
INPUT_AD:	EQU	0x15E6
OUT_CODE:	EQU	0x15EF
CHAN_OPEN:	EQU	0x1601
MAKE_ROOM:	EQU	0x1655
LINE_NO:	EQU	0x1695
SET_MIN:	EQU	0x16B0
AUTO_LIST_C:	EQU	0x17A0
NUMBER:		EQU	0x18B6
LN_FETCH:	EQU	0x190F
LN_STORE:	EQU	0x191C
OUT_CHAR:	EQU	0x1937
LINE_ADDR:	EQU	0x196E
NEXT_ONE:	EQU	0x19B8
RECLAIM_1:	EQU	0x19E5
RECLAIM_2:	EQU	0x19E8
E_LINE_NO:	EQU	0x19FB
OUT_NUM_1:	EQU	0x1A1B
LINE_SCAN:	EQU	0x1B17
LINE_RUN:	EQU	0x1B8A
REPORTB:	EQU	0x1E9F
COTEMP5:	EQU	0x2211
; System variables
LAST_K:		EQU	0x5C08
DEFADD:		EQU	0x5C0B
K_DATA:		EQU	0x5C0D
TVDATA:		EQU	0x5C0E
STRM00:		EQU	0x5C16
STRM01:		EQU	0x5C18
STRM02:		EQU	0x5C1A
CHARS:		EQU	0x5C36
ERR_NR:		EQU	0x5C3A
FLAGS:		EQU	0x5C3B
TV_FLAG:	EQU	0x5C3C
ERR_SP:		EQU	0x5C3D
LIST_SP:	EQU	0x5C3F
MODE:		EQU	0x5C41
NEWPPC:		EQU	0x5C42
NSPPC:		EQU	0x5C44
PPC:		EQU	0x5C45
E_PPC:		EQU	0x5C49
CHANS:		EQU	0x5C4F
CURCHL:		EQU	0x5C51
PROG:		EQU	0x5C53
E_LINE:		EQU	0x5C59
K_CUR:		EQU	0x5C5B
CH_ADD:		EQU	0x5C5D
X_PTR:		EQU	0x5C5F
WORKSP:		EQU	0x5C61
OSPCC:		EQU	0x5C70
FRAMES:		EQU	0x5C78
UDG:		EQU	0x5C7B
COORDS:		EQU	0x5C7D
ECHO_E:		EQU	0x5C82
DF_CCL:		EQU	0x5C86
S_POSN:		EQU	0x5C88
S_POSNL:	EQU	0x5C8A
SCR_CT:		EQU	0x5C8C
ATTR_P:		EQU	0x5C8D
P_FLAG:		EQU	0x5C91
MEMBOT:		EQU	0x5C92
RAMTOP:		EQU	0x5CB2

; Change the ORG statement for the 16k model or to
; suit your particular needs.
	ORG	63042

; This replaces the NEW command and sets up the system
NEW:	LD	HL,(RAMTOP)
	DEC	HL
	LD	SP,HL
	DEC	HL
	DEC	HL
	LD	(ERR_SP),HL
	LD	DE,(PROG)
	PUSH	DE
	LD	HL,(E_LINE)
	DEC	HL
	CALL	RECLAIM_1
	POP	HL
	LD	A,(STRM01)
	DEC	A
	OR	(IY-0x1F)
	JR	NZ,NEW1
	DEC	HL
	LD	BC,CHINFE-CHINF
	PUSH	BC
	CALL	MAKE_ROOM
	LD	HL,CHINFE-1
	POP	BC
	LDDR
	EX	DE,HL
	LD	DE,(CHANS)
	AND	A
	SBC	HL,DE
	INC	HL
	INC	HL
	LD	(STRM00),HL
	LD	(STRM01),HL
	LD	DE,S64-K64
	ADD	HL,DE
	LD	(STRM02),HL
NEW1:	JP	MAIN

; IF1 compatible channel information to
; be copied into CHANS area. These are
; never overwritten by the ROM.
CHINF:

; K channel and state
K64:	DEFW	RPOUT
	DEFW	KIN
	DEFB	"K"
; used here, not in CHANS area
CURSOR:	DEFW	0xFFFF
QUESTION:
	DEFW	0xFFFF
	DEFW	K64E-K64
K64E:

; S channel and state
S64:	DEFW	RPOUT
	DEFW	REPORT_J
	DEFB	"S"
	DEFW	0
	DEFW	0
	DEFW	S64E-S64
S64E:
CHINFE:

; CLS routine resetting channel states
; safer than the CLS command, though that also works
CLS:	CALL	CLALL
CLSLO:	LD	HL,TV_FLAG
	RES	5,(HL)
	SET	0,(HL)
	CALL	TEMPS
	LD	B,(IY+0x31)
	CALL	CL_LINE
	LD	HL,0x5AC0
	LD	A,(ATTR_P)
	DEC	B
	JR	CLS3
CLS1:	LD	C,0x20
CLS2:	DEC	HL
	LD	(HL),A
	DEC	C
	JR	NZ,CLS2
CLS3:	DJNZ	CLS1
	LD	(IY+0x31),2

; Reset system K channel
CLCHAN:	LD	A,0xFD
	CALL	CHAN_OPEN
	LD	HL,(CURCHL)
	LD	(HL),POUT - 0x100 * (POUT / 0x100)
	INC	HL
	LD	(HL),POUT / 0x100
	INC	HL
	LD	(HL),KIN - 0x100 * (KIN / 0x100)
	INC	HL
	LD	(HL), KIN / 0x100
	LD	BC,0x1741
	JP	CLSET

; Reset system S channel and drawing board
CLALL:	LD	HL,0
	LD	(COORDS),HL
	RES	0,(IY+0x30)
	CALL	CLCHAN
	LD	A,0xFE
	CALL	CHAN_OPEN
	LD	B,0x18
	CALL	CL_LINE
	LD	HL,(CURCHL)
	LD	(HL),POUT - 0x100 * (POUT / 0x100)
	INC	HL
	LD	(HL),POUT / 0x100
	LD	(IY+0x52),1
	LD	BC,0x1841
	JP	CLSET

; Automatic listing with S channel reset
ALIST:	LD	(LIST_SP),SP
	LD	(IY+2),0x10
	CALL	CLALL
	JP	AUTO_LIST_C

; Add a line to BASIC, replicated to avoid
; slipping back to original MAIN
MAINADD:LD	(E_PPC),BC
	LD	DE,(CH_ADD)
	LD	HL,REPORTG
	PUSH	HL
	LD	HL,(WORKSP)
	SCF
	SBC	HL,DE
	PUSH	HL
	LD	H,B
	LD 	L,C
	CALL	LINE_ADDR
	JR	NZ,MADD1
	CALL	NEXT_ONE
	CALL	RECLAIM_2
MADD1:	POP	BC
	LD	A,C
	DEC	A
	OR	B
	JR	Z,MADD2
	PUSH	BC
	INC	BC
	INC	BC
	INC	BC
	INC	BC
	DEC	HL
	LD	DE,(PROG)
	PUSH	DE
	CALL	MAKE_ROOM
	POP	HL
	LD	(PROG),HL
	POP	BC
	PUSH	BC
	INC	DE
	LD	HL,(WORKSP)
	DEC	HL
	DEC	HL
	LDDR
	LD	HL,(E_PPC)
	EX	DE,HL
	POP	BC
	LD	(HL),B
	DEC	HL
	LD	(HL),C
	DEC	HL
	LD	(HL),E
	DEC	HL
	LD	(HL),D
MADD2:	POP	AF

; Main execution loop with modified channel resets
MAIN:	LD	(IY+0x31),2
	CALL	ALIST
MAIN1:	CALL	SET_MIN
MAIN2:	XOR	A
	CALL	CHAN_OPEN
	CALL	EDITOR
	CALL	LINE_SCAN
	BIT	7,(IY+0)
	JR	NZ,MAIN3
	BIT	4,(IY+0x30)
	JP	Z,MAIN4
	LD	HL,(E_LINE)
	CALL	REMOVE_FP
	LD	(IY+0),0xFF
	JR	MAIN2

REPORTG:LD	A,0x10
	LD	BC,0
	JR	MAING

MAIN3:	LD	HL,(E_LINE)
	LD	(CH_ADD),HL
	CALL	E_LINE_NO
	LD	A,B
	OR	C
	JP	NZ,MAINADD
	RST	0x18
	CP	0x0D
	JR	Z,MAIN
	BIT	0,(IY+0x30)
	CALL	NZ,CLALL
	CALL	CLSLO
	LD	A,0x19
	SUB	(IY+0x4F)
	LD	(SCR_CT),A
	SET	7,(IY+1)
	LD	(IY+0),0xFF
	LD	(IY+0x0A),1
	CALL	LINE_RUN
MAIN4:	HALT
	RES	5,(IY+1)
	BIT	1,(IY+0x30)
	CALL	NZ,COPY_BUFF
	LD	A,(ERR_NR)
	INC	A
MAING:	PUSH	AF
	CALL	CLFLASH
	LD	HL,0
	LD	(IY+0x37),H
	LD	(IY+0x26),H
	LD	(DEFADD),HL
	CALL	SET_MIN
	RES	5,(IY+0x37)
	CALL	CLSLO
	SET	5,(IY+2)
	POP	AF
	LD	B,A
	CP	0x0A
	JR	C,MAIN5
	ADD	A,7
MAIN5:	CALL	OUT_CODE
	LD	A," "
	RST	0x10
	LD	A,B
	LD	DE,REPORTS
	CALL	PMSG
	XOR	A
	LD	DE,COMMA_SPC
	CALL	PMSG
	LD	BC,(PPC)
	CALL	OUT_NUM_1
	LD	A,":"
	RST	0x10
	LD	C,(IY+0x0D)
	LD	B,0
	CALL	OUT_NUM_1
	CALL	CLEAR_SP
	LD	A,(ERR_NR)
	INC	A
	JR	Z,MAIN9
	CP	9
	JR	Z,MAIN6
	CP	0x15
	JR	Z,MAIN7
MAIN6:	INC	(IY+0x0D)
MAIN7:	LD	BC,3
	LD	DE,OSPCC
	LD	HL,NSPPC
	BIT	7,(HL)
	JR	Z,MAIN8
	ADD	HL,BC
MAIN8:	LDDR
MAIN9:	LD	(IY+0x0A),0xFF
	RES	3,(IY+1)
	JP	MAIN2

; Jump table for control characters
CTRTAB:	DEFB	PCOMMA - $	; comma
	DEFB	PQUEST - $	; EDIT
	DEFB	PBACK - $	; cursor left
	DEFB	PRIGHT - $	; cursor right
	DEFB	PQUEST - $	; cursor down (LF)
	DEFB	PQUEST - $	; cursor up
; Form Feed added for safe CLS
	DEFB	PFF - $		; DELETE (FF)
	DEFB	PENTER - $	; ENTER (CR)
	DEFB	PQUEST - $	; N/A
	DEFB	PQUEST - $	; N/A
	DEFB	P1OPER - $	; INK
	DEFB	P1OPER - $	; PAPER
	DEFB	P1OPER - $	; FLASH
	DEFB	P1OPER - $	; BRIGHT
	DEFB	P1OPER - $	; INVERSE
	DEFB	P1OPER - $	; OVER
	DEFB	P2OPER - $	; AT
	DEFB	P2OPER - $	; TAB

PBACK:	INC	C
	LD	A,0x42
	CP	C
	JR	NZ,CLSET
	INC	B
	LD	C,2
	LD	A,0x19
	CP	B
	JR	NZ,CLSET
	DEC	B
	LD	C,0x41
CLSET:	LD	A,B
	BIT	0,(IY+2)
	JR	Z,CLSET1
	ADD	A,(IY+0x31)
	SUB	0x18
CLSET1:	PUSH	BC
	LD	B,A
	CALL	CL_ADDR
	POP	BC
	LD	A,0x41
	SUB	C
	RRA
	LD	E,A
	LD	D,0
	ADD	HL,DE
	JP	POSTORE


PENTER:	LD	C,0x41
	CALL	POSCR
	LD	C,0x41
	DEC	B
	JR	CLSET
PTV2:	LD	DE,PCONT
	LD	(TVDATA+1),A
	JP	POCHANGE
P2OPER:	LD	DE,PTV2
	JR	PTV1

P1OPER:	LD	DE,PCONT
PTV1:	JP	POTV1

; Use the channel-restoring address, to be
; overwritten on next use
PCONT:	LD	DE,RPOUT
	CALL	POCHANGE
	LD	HL,(TVDATA)
	LD	D,A
	LD	A,L
	CP	0x16
	JP	C,COTEMP5
	JR	NZ,PTAB
	LD	B,H
	LD	C,D
	LD	A,0x3F
	SUB	C
	JR	C,PATERR
	ADD	A,2
	LD	C,A
	LD	A,0x16
	SUB	B
PATERR:	JP	C,REPORTB
	INC	A
	LD	B,A
	INC	B
	BIT	0,(IY+2)
	JR	NZ,POSCR
	CP	(IY+0x31)
	JR	NC,CLSET
	JP	REPORT5

PRIGHT:	LD	A,(P_FLAG)
	PUSH	AF
	LD	(IY+0x57),1
	LD	A," "
	CALL	PABLE
	POP	AF
	LD	(P_FLAG),A
	RET

PTAB:	LD	A,H
PFILL:	CALL	POFETCH
	ADD	A,C
	DEC	A
	AND	0x3F
	RET	Z
	LD	D,A
	SET	0,(IY+1)
PSPACE:	LD	A," "
	CALL	POSAVE
	DEC	D
	JR	NZ,PSPACE
	RET

POSCR:	BIT	1,(IY+1)
	RET	NZ
	LD	DE,CLSET
	JP	POSCR_C

PCOMMA:	LD	A,C
	DEC	A
	DEC	A
	AND	0x20
	JR	PFILL

; Output routine that restores system channels
RPOUT:	CALL	RESTCH
; Regular 64-column output routine
POUT:	CP	165	; RND
	JP	NC,PRINT_OUT
	CALL	POFETCH
	CP	" "
	JP	NC,PABLE
	CP	6
	JR	C,PQUEST
	CP	24
	JR	NC,PQUEST
	LD	HL,CTRTAB - 6
	LD	E,A
	LD	D,0
	ADD	HL,DE
	LD	E,(HL)
	ADD	HL,DE
	PUSH	HL
	JP	POFETCH
PFF:	BIT	0,(IY+2)
	JP	Z,CLS
PQUEST:	LD	A,"?"
PABLE:	PUSH	BC
	LD	BC,CHSET-0x100
	EX	DE,HL
	LD	HL,FLAGS
	RES	0,(HL)
	CP	" "
	JR	NZ,POCH3
	SET	0,(HL)
POCH3:	ADD	A,A
	JR	NC,POCH4
	SUB	0x20
	JR	C,POGR
	LD	BC,(UDG)
POCH4:	LD	L,A
	LD	H,0
	ADD	HL,HL
	ADD	HL,HL
	ADD	HL,BC
	POP	BC
	EX	DE,HL
PRAL:	LD	A,C
	DEC	A
	LD	A,0x41
	JR	NZ,PRAL1
	DEC	B
	LD	C,A
PRAL1:	CP	C
	JR	NZ,NOSCR
	PUSH	DE
	CALL	POSCR
	BIT	0,(IY+2)
	JR	NZ,SCRLO
	LD	A,(S_POSN)
	CP	0x21
SCRLO:	LD	C,0x41
	CALL	Z,CLSET
	POP	DE
NOSCR:	PUSH	BC
	PUSH	HL
	LD	B,8
	RR	C
	LD	C,0
	LD	A,(P_FLAG)
	BIT	2,A
	JR	Z,NOINV
	DEC	C
NOINV:	BIT	0,A
	JR	NZ,POVER
	JR	NC,L2
L1:	RLD
	LD	A,(DE)
	XOR	C
	RRD
	INC	H
	INC	DE
	DJNZ	L1
	DEC	H
	CALL	PATTR
	POP	HL
	JR	PORET
L2:	RRD
	LD	A,(DE)
	XOR	C
	RLD
	INC	H
	INC	DE
	DJNZ	L2
PORET1:	DEC	H
	CALL	PATTR
	POP	HL
	INC	HL
PORET:	POP	BC
	DEC	C
	JP	POSTORE
POGR:	RRA
	LD	C,A
	CALL	POGR1
	CALL	POFETCH
	LD	DE,MEMBOT
	POP	BC
	JR	PRAL
POVER:	JR	NC,OL2
OL1:	RLD
	EX	DE,HL
	XOR	(HL)
	EX	DE,HL
	XOR	C
	RRD
	INC	H
	INC	DE
	DJNZ	OL1
	DEC	H
	CALL	PATTR
	POP	HL
	JR	PORET
OL2:	RRD
	EX	DE,HL
	XOR	(HL)
	EX	DE,HL
	XOR	C
	RLD
	INC	H
	INC	DE
	DJNZ	OL2
	JR	PORET1

; Input routine hijacking EDITOR in the stack
KIN:	LD	HL,6
	ADD	HL,SP
	LD	A,(HL)
	CP	0x3B
	JR	NZ,KIN1
	INC	HL
	LD	A,(HL)
	CP	0x0F
	JR	NZ,KIN1
	LD	(HL),EDLRET / 0x100
	DEC	HL
	LD	(HL),EDLRET - 0x100 * (EDLRET / 0x100)
	DEC	HL
	LD	(HL),WKEY2 / 0x100
	DEC	HL
	LD	(HL),WKEY2 - 0x100 * (WKEY2 / 0x100)
; Input routine handling state from stream 0xFD
KIN1:	LD	HL,(CHANS)
	INC	HL
	INC	HL
	INC	HL
	LD	A,(HL)
	LD	(HL),KIN / 0x100
	DEC	HL
	LD	(HL),KIN - 0x100 * (KIN / 0x100)
	CP	0x11
	JR	NZ,KIN2
	LD	A,(K_DATA)
	SCF
	RET
; Regular input routine for 64-column EDITOR
KIN2:	BIT	3,(IY+2)
	CALL	NZ,EDCOPY
	AND	A
	BIT	5,(IY+1)
	RET	Z
	LD	A,(LAST_K)
	RES	5,(IY+1)
	PUSH	AF
	BIT	5,(IY+2)
	CALL	NZ,CLSLO
	JP	KEY_INPUT_C
CLFLASH:LD	HL,0xFFFF
	LD	(CURSOR),HL
	LD	(QUESTION),HL
	RET
EDCOPY:	CALL	RESTCH
	CALL	TEMPS
	RES	3,(IY+2)
	RES	5,(IY+2)
	CALL	CLFLASH
	LD	HL,(S_POSNL)
	PUSH	HL
	LD	HL,(ERR_SP)
	PUSH	HL
	LD	HL,ED_FULL
	PUSH	HL
	LD	(ERR_SP),SP
	LD	HL,(ECHO_E)
	PUSH	HL
	SCF
	CALL	SET_DE
	EX	DE,HL
	CALL	OLINE2
	EX	DE,HL
	CALL	OCURS
	LD	HL,(S_POSNL)
	EX	(SP),HL
	EX	DE,HL
	CALL	TEMPS
EDBLANK:LD	A,(S_POSNL+1)
	SUB	D
	JR	C,EDCDONE
	JR	NZ,EDSPCS
	LD	A,E
	SUB	(IY+0x50)
	JR	NC,EDCDONE
EDSPCS:	LD	A," "
	PUSH	DE
	CALL	POUT
	POP	DE
	JR	EDBLANK
EDCDONE:POP	DE
	POP	HL
	POP	HL
	LD	(ERR_SP),HL
	POP	BC
	PUSH	DE
	CALL	CLSET
	JP	ED_C_END_C
OLINE2:	SET	0,(IY+1)
	PUSH	DE
	EX	DE,HL
	RES	2,(IY+0x30)
	LD	HL,FLAGS
	RES	2,(HL)
	BIT	5,(IY+0x37)
	JR	Z,OLINE4
	SET	2,(HL)
OLINE4:	LD	HL,(X_PTR)
	AND	A
	SBC	HL,DE
	JR	NZ,OLINE5
	LD	A,"?"
	CALL	OFLASH
OLINE5:	CALL	OCURS
	EX	DE,HL
	LD	A,(HL)
	CALL	NUMBER
	INC	HL
	CP	0x0D
	JR	Z,POPDERET
	EX	DE,HL
	CALL	OUT_CHAR
	JR	OLINE4

OFLASH:	PUSH	DE
	CALL	RESTCH
	LD	HL,(S_POSNL)
	CP	"?"
	JR	NZ,OFLASH1
	LD	(QUESTION),HL
	JR	OFLASH2
OFLASH1:LD	(CURSOR),HL
OFLASH2:CALL	POUT
POPDERET:
	POP	DE
	RET

OCURS:	LD	HL,(K_CUR)
	AND	A
	SBC	HL,DE
	RET	NZ
	LD	A,(MODE)
	RLC	A
	JR	Z,OUTC1
	ADD	A,0x43
	JR	OUTC2
OUTC1:	LD	HL,FLAGS
	RES	3,(HL)
	LD	A,"K"
	BIT	2,(HL)
	JR	Z,OUTC2
	SET	3,(HL)
	INC	A
	BIT	3,(IY+0x30)
	JR	Z,OUTC2
	LD	A,"C"
OUTC2:	JR	OFLASH

; EDITOR Error handling
EDERR:	BIT	4,(IY+0x30)
	JP	Z,ED_END
	LD	(IY+0),0xFF
	LD	D,0
	LD	E,(IY-2)
	LD	HL,0x1A90
	CALL	BEEPER
	JR	EDAGAIN
; 64-column EDITOR
EDITOR:	LD	HL,(ERR_SP)
	PUSH	HL
EDAGAIN:LD	HL,EDERR
	PUSH	HL
	LD	(ERR_SP),SP
EDLOOP:	LD	DE,KIN
	CALL	KEY_CHAN
	CALL	WAITKEY
EDLRET:	PUSH	AF
	LD	D,0
	LD	E,(IY-1)
	LD	HL,0xC8
	CALL	BEEPER
	POP	AF
	LD	HL,EDLOOP
	PUSH	HL
	CP	0x18
	JP	NC,ADD_CHAR
	CP	0x07
	JP	C,ADD_CHAR
	CP	0x10
	JP	NC,EDITOR_C
	CP	0x0A
	JR	Z,EDDOWN
	CP	0x0B
	JR	Z,EDUP
	JP	ED_KEYS
EDDOWN:	BIT	5,(IY+0x37)
	JP	NZ,ED_STOP
	LD	HL,E_PPC
	CALL	LN_FETCH
	JR	EDLIST
EDUP:	BIT	5,(IY+0x37)
	RET	NZ
	LD	HL,(E_PPC)
	CALL	LINE_ADDR
	EX	DE,HL
	CALL	LINE_NO
	LD	HL,E_PPC + 1
	CALL	LN_STORE
EDLIST:	CALL	ALIST
	JP	ED_LIST_C
; Wait for keypress with "FLASH"
WAITKEY:BIT	5,(IY+2)
	JR	NZ,WKEY1
	SET	3,(IY+2)
WKEY1:	LD	A,(FRAMES)
	AND	0xF
	CALL	Z,WKFLASH
	CALL	INPUT_AD
WKEY2:	RET	C
	HALT
	JR	Z,WKEY1
	RST	8
	DEFB	7; EOF

; "FLASH" cursor and question mark, if present
WKFLASH:LD	BC,(CURSOR)
	CALL	FLASHC
	LD	BC,(QUESTION)
FLASHC:	LD	HL,(ECHO_E)
	PUSH	HL
	LD	HL,(DF_CCL)
	PUSH	HL
	LD	HL,(S_POSNL)
	PUSH	HL
	LD	A,B
	AND	C
	INC	A
	JR	Z,POPRET
	CALL	CLSET
	RR	C
	LD	B,8
	JR	NC,FL2
FL1:	RLD
	CPL
	RRD
	INC	H
	DJNZ	FL1
	JR	POPRET
FL2:	RRD
	CPL
	RLD
	INC	H
	DJNZ	FL2
POPRET:	POP	BC
	POP	HL
	CALL	POST_E
	POP	HL
	LD	(ECHO_E),HL
	RET

POGR1:	LD	HL,MEMBOT
	CALL	POGR2
POGR2:	RR	C
	SBC	A,A
	AND	0x03
	LD	B,A
	RR	C
	SBC	A,A
	AND	0x0C
	OR	B
	LD	B,4
POGR3:	LD	(HL),A
	INC	L
	DJNZ	POGR3
	RET

; Restore system channel state, if corrupted by ROM
RESTCH:	CALL	POFETCH
	LD	E,A
	LD	A,L
	AND	0x1F
	LD	A,E
	RET	NZ
	LD	A,C
	CP	0x21
	LD	A,E
	RET	NZ
	LD	C,0x41
	CALL	POSTORE
	LD	HL,(CHANS)
	LD	BC,POUT
	LD	(HL),C
	INC	HL
	LD	(HL),B
	INC	HL
	LD	(HL),KIN - 0x100 * (KIN / 0x100)
	INC	HL
	LD	(HL),KIN / 0x100
	INC	HL
	INC	HL
	LD	(HL),C
	INC	HL
	LD	(HL),B
	LD	A,E
	RET

; Character set
CHSET:	INCBIN	"64.bin"
